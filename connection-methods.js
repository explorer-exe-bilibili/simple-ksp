// ÁßªÂä®ÈÉ®‰ª∂Êó∂ÁöÑËøûÊé•Ê£ÄÊµãÂíåÂ§ÑÁêÜÊñπÊ≥ï

// Âú® RocketBuilder Á±ª‰∏≠Ê∑ªÂä†Ëøô‰∫õÊñπÊ≥ïÔºö

// Â§ÑÁêÜÁßªÂä®ÈÉ®‰ª∂Êó∂ÁöÑËøûÊé•ÈÄªËæë
handleMovingPartConnections(movingPart) {
    console.log('\nüîÑ Â§ÑÁêÜÁßªÂä®ÈÉ®‰ª∂ËøûÊé•ÈÄªËæë:', movingPart.data.name);
    
    // 1. Ê£ÄÊü•Áé∞ÊúâËøûÊé•ÊòØÂê¶ÈúÄË¶ÅÊñ≠ÂºÄ
    const brokenConnections = this.assembly.checkAndBreakInvalidConnections();
    if (brokenConnections.length > 0) {
        console.log(`üì¢ Êñ≠ÂºÄ‰∫Ü ${brokenConnections.length} ‰∏™ËøûÊé•:`, brokenConnections);
        if (typeof showNotification === 'function') {
            showNotification('ËøûÊé•Êñ≠ÂºÄ', 
                `${brokenConnections.length}‰∏™ËøûÊé•Âõ†Ë∑ùÁ¶ªËøáËøúËÄåËá™Âä®Êñ≠ÂºÄ`, 'warning');
        }
    }
    
    // 2. Ê£ÄÊü•ÊòØÂê¶ÊúâÊñ∞ÁöÑËøûÊé•Êú∫‰ºö
    const newConnection = this.checkMovingPartConnections(movingPart);
    if (newConnection) {
        console.log('üîó ÂèëÁé∞ËøûÊé•Êú∫‰ºöÔºåËá™Âä®ÂØπÈΩê');
        
        // Ëá™Âä®ÂØπÈΩêÂà∞ËøûÊé•ÁÇπ
        movingPart.position = newConnection.adjustedPosition;
        
        // Êõ¥Êñ∞DOMÂÖÉÁ¥†‰ΩçÁΩÆ
        const partElement = document.querySelector(`[data-part-id="${movingPart.id}"]`);
        if (partElement) {
            partElement.style.left = `${newConnection.adjustedPosition.x}px`;
            partElement.style.top = `${newConnection.adjustedPosition.y}px`;
        }
        
        // ÂàõÂª∫ËøûÊé•
        const connectionResult = this.assembly.connectParts(
            newConnection.otherPart.id,
            newConnection.otherPoint,
            newConnection.movingPart.id,
            newConnection.movingPoint
        );
        
        if (connectionResult) {
            console.log('‚úÖ ÂàõÂª∫Êñ∞ËøûÊé•ÊàêÂäü:', connectionResult.id);
            if (typeof showNotification === 'function') {
                showNotification('Ëá™Âä®ËøûÊé•', 
                    `${movingPart.data.name} Â∑≤ËøûÊé•Âà∞ ${newConnection.otherPart.data.name}`, 'success');
            }
        }
    }
    
    // 3. Êõ¥Êñ∞ËøûÊé•Á∫øÊòæÁ§∫
    this.updateConnectionLines();
}

// Ê£ÄÊµãÁßªÂä®ÈÉ®‰ª∂ÁöÑËøûÊé•Êú∫‰ºö
checkMovingPartConnections(movingPart) {
    console.log('\n=== Ê£ÄÊµãÁßªÂä®ÈÉ®‰ª∂ÁöÑËøûÊé•Êú∫‰ºö ===');
    console.log('ÁßªÂä®ÈÉ®‰ª∂:', movingPart.data.name, 'ÂΩìÂâç‰ΩçÁΩÆ:', movingPart.position);
    
    const connectionRange = 80; // ÁßªÂä®Êó∂ÁöÑËøûÊé•Ê£ÄÊµãËåÉÂõ¥
    const autoConnections = [];

    // ÈÅçÂéÜÊâÄÊúâÂÖ∂‰ªñÈÉ®‰ª∂
    this.assembly.parts.forEach(otherPart => {
        if (otherPart.id === movingPart.id) return; // Ë∑≥ËøáËá™Â∑±
        if (!otherPart.data.attachment_points || !movingPart.data.attachment_points) return;
        
        console.log(`\nÊ£ÄÊü•‰∏éÈÉ®‰ª∂ ${otherPart.data.name} ÁöÑËøûÊé•ÂèØËÉΩÊÄß:`);
        
        // Ê£ÄÊü•ÁßªÂä®ÈÉ®‰ª∂ÁöÑÊØè‰∏™ËøûÊé•ÁÇπ‰∏éÂÖ∂‰ªñÈÉ®‰ª∂ÁöÑÊØè‰∏™ËøûÊé•ÁÇπ
        Object.entries(movingPart.data.attachment_points).forEach(([movingPointName, movingPointData]) => {
            Object.entries(otherPart.data.attachment_points).forEach(([otherPointName, otherPointData]) => {
                
                // Ê£ÄÊü•ËøûÊé•ÂÖºÂÆπÊÄß
                if (Math.abs(movingPointData.size - otherPointData.size) >= 0.1) {
                    console.log(`  ‚úó ${movingPointName} <-> ${otherPointName}: Â∞∫ÂØ∏‰∏çÂÖºÂÆπ`);
                    return;
                }
                
                // ËÆ°ÁÆóËøûÊé•ÁÇπ‰ΩçÁΩÆ
                const movingPartCenterX = movingPart.position.x + (movingPart.data.dimensions.width * 20);
                const movingPartCenterY = movingPart.position.y + (movingPart.data.dimensions.height * 20);
                const movingPointX = movingPartCenterX + (movingPointData.x * 40);
                const movingPointY = movingPartCenterY + (movingPointData.y * 40);
                
                const otherPartCenterX = otherPart.position.x + (otherPart.data.dimensions.width * 20);
                const otherPartCenterY = otherPart.position.y + (otherPart.data.dimensions.height * 20);
                const otherPointX = otherPartCenterX + (otherPointData.x * 40);
                const otherPointY = otherPartCenterY + (otherPointData.y * 40);
                
                // ËÆ°ÁÆóË∑ùÁ¶ª
                const distance = Math.sqrt(
                    Math.pow(movingPointX - otherPointX, 2) + 
                    Math.pow(movingPointY - otherPointY, 2)
                );
                
                console.log(`  ${movingPointName} <-> ${otherPointName}: Ë∑ùÁ¶ª ${distance.toFixed(2)}px`);
                
                if (distance <= connectionRange) {
                    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèËøûÊé•
                    const existingConnection = this.assembly.connections.find(conn => 
                        (conn.partA === movingPart.id && conn.partB === otherPart.id && 
                         conn.attachPointA === movingPointName && conn.attachPointB === otherPointName) ||
                        (conn.partA === otherPart.id && conn.partB === movingPart.id && 
                         conn.attachPointA === otherPointName && conn.attachPointB === movingPointName)
                    );
                    
                    if (!existingConnection) {
                        console.log(`  ‚òÖ ÂèëÁé∞Êñ∞ËøûÊé•Êú∫‰ºö! Ë∑ùÁ¶ª: ${distance.toFixed(2)}px`);
                        
                        // ËÆ°ÁÆóÂØπÈΩêÂêéÁöÑ‰ΩçÁΩÆ
                        const offsetX = otherPointX - movingPointX;
                        const offsetY = otherPointY - movingPointY;
                        const adjustedPosition = {
                            x: movingPart.position.x + offsetX,
                            y: movingPart.position.y + offsetY
                        };
                        
                        autoConnections.push({
                            movingPart: movingPart,
                            otherPart: otherPart,
                            movingPoint: movingPointName,
                            otherPoint: otherPointName,
                            distance: distance,
                            adjustedPosition: adjustedPosition
                        });
                    } else {
                        console.log(`  ‚úì Â∑≤Â≠òÂú®ËøûÊé•: ${existingConnection.id}`);
                    }
                }
            });
        });
    });
    
    // ÈÄâÊã©ÊúÄ‰Ω≥ËøûÊé•Êú∫‰ºöÔºàË∑ùÁ¶ªÊúÄËøëÁöÑÔºâ
    if (autoConnections.length > 0) {
        const bestConnection = autoConnections.reduce((best, current) => 
            current.distance < best.distance ? current : best
        );
        
        console.log('\n=== ÈÄâÊã©ÊúÄ‰Ω≥ËøûÊé• ===');
        console.log('ÊúÄ‰Ω≥ËøûÊé•:', bestConnection);
        
        return bestConnection;
    }
    
    console.log('\n=== Êó†ËøûÊé•Êú∫‰ºö ===');
    return null;
}
